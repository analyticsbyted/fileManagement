import os
import pandas as pd
from humanize import naturalsize  # You may need to install the 'humanize' package

def get_folder_info(folder_path, root_path):
    folder_name = os.path.basename(folder_path)
    try:
        last_modified = os.path.getmtime(folder_path)
    except (OSError, FileNotFoundError):
        last_modified = None

    # Calculate the depth of the folder in the directory tree
    depth = folder_path[len(root_path):].count(os.path.sep)

    # Get the parent folder
    parent_folder = os.path.dirname(folder_path)

    # Count the number of files in the folder
    file_count = 0
    for _, _, filenames in os.walk(folder_path):
        file_count += len(filenames)

    return {
        "Folder Name": folder_name,
        "Size": get_folder_size(folder_path),
        "Path": folder_path,
        "File Count": file_count,
        "Last Modified": last_modified,
        "Depth": depth,
        "Parent Folder": parent_folder,
    }

def get_folder_size(folder_path):
    total_size = 0
    for dirpath, _, filenames in os.walk(folder_path):
        for filename in filenames:
            file_path = os.path.join(dirpath, filename)
            try:
                file_size = os.path.getsize(file_path)
                total_size += file_size
            except (OSError, FileNotFoundError):
                # Handle the case where the file cannot be accessed
                pass
    return total_size

def main():
    # Define the root directory to start the search from
    root_directory = "C:\\"  # Change this to your desired root directory
    
    # Create an empty DataFrame
    df_list = []
    
    # Traverse the root directory
    for dirpath, _, _ in os.walk(root_directory):
        folder_info = get_folder_info(dirpath, root_directory)
        if folder_info["Size"] > 0:
            df_list.append(folder_info)
    
    # Create a DataFrame from the list
    df = pd.DataFrame(df_list)
    
    # Sort the DataFrame by folder size (largest to smallest)
    df = df.sort_values(by="Size", ascending=False)
    
    # Convert last modified timestamp to a readable format
    df["Last Modified"] = pd.to_datetime(df["Last Modified"], unit="s")
    
    # Print the DataFrame
    print(df)
    
    # Save the DataFrame as a CSV file
    df.to_csv("folder_info.csv", index=False)

if __name__ == "__main__":
    main()
